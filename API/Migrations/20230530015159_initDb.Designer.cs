// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230530015159_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Like", b =>
                {
                    b.Property<int>("liker_id")
                        .HasColumnType("int");

                    b.Property<int>("likee_id")
                        .HasColumnType("int");

                    b.HasKey("liker_id", "likee_id");

                    b.HasIndex("likee_id");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("date_read")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_read")
                        .HasColumnType("bit");

                    b.Property<DateTime>("message_sent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("recipient_deleted")
                        .HasColumnType("bit");

                    b.Property<int>("recipientid")
                        .HasColumnType("int");

                    b.Property<bool>("sender_deleted")
                        .HasColumnType("bit");

                    b.Property<int>("senderid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("recipientid");

                    b.HasIndex("senderid");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("API.Models.Photo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_added")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_main")
                        .HasColumnType("bit");

                    b.Property<string>("public_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_of_birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("known_as")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("last_active")
                        .HasColumnType("datetime2");

                    b.Property<string>("looking_for")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("password_hash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("password_salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.Like", b =>
                {
                    b.HasOne("API.Models.User", "likee")
                        .WithMany("likers")
                        .HasForeignKey("likee_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.User", "likers")
                        .WithMany("likees")
                        .HasForeignKey("liker_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("likee");

                    b.Navigation("likers");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.HasOne("API.Models.User", "recipient")
                        .WithMany("message_received")
                        .HasForeignKey("recipientid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.User", "sender")
                        .WithMany("message_sent")
                        .HasForeignKey("senderid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("recipient");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("API.Models.Photo", b =>
                {
                    b.HasOne("API.Models.User", "user")
                        .WithMany("photos")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("likees");

                    b.Navigation("likers");

                    b.Navigation("message_received");

                    b.Navigation("message_sent");

                    b.Navigation("photos");
                });
#pragma warning restore 612, 618
        }
    }
}
